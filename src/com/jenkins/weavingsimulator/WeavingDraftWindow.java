/*
 * WeavingDraftWindow.java
 * 
 * Created on April 5, 2003, 4:47 AM
 *  
 * Copyright 2003 Adam P. Jenkins
 * 
 * This file is part of WeavingSimulator
 * 
 * WeavingSimulator is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * WeavingSimulator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with WeavingSimulator; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */


package com.jenkins.weavingsimulator;

import com.jenkins.weavingsimulator.datatypes.WeavingDraft;
import com.jenkins.weavingsimulator.models.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;

import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author  ajenkins
 *
 * TODO Add a new pallete grid control, which allows a palette to be created.
 * This will be connected to the endColorGrid and pickColorGrid via their
 * models.  It should work by having the cell editor for the end and pick
 * colorGrids have a reference.
 */
public class WeavingDraftWindow extends javax.swing.JInternalFrame {
    
    /** Creates new form WeavingDraftWindow */
    public WeavingDraftWindow() {
        initComponents();
        
        int squareWidth = 15;
        WeavingDraft draft = new WeavingDraft("");
        weavingPatternGrid.setModel(new WeavingPatternModel(draft));
        weavingPatternGrid.setSquareWidth(squareWidth);
        
        threadingDraftGrid.setModel(new ThreadingDraftModel(draft));
        threadingDraftGrid.setSquareWidth(squareWidth);
        
        warpEndColorGrid.setModel(new WarpEndColorModel(draft));
        warpEndColorGrid.setSquareWidth(squareWidth);
        warpEndColorGrid.setDefaultEditor(Color.class,
                new ColorCellEditor());
        
        tieUpGrid.setModel(new TieUpModel(draft));
        tieUpGrid.setSquareWidth(squareWidth);
        
        treadlingDraftGrid.setModel(new TreadlingDraftModel(draft));
        treadlingDraftGrid.setSquareWidth(squareWidth);
        
        pickColorGrid.setModel(new StepColorModel(draft));
        pickColorGrid.setSquareWidth(squareWidth);
        pickColorGrid.setDefaultEditor(Color.class,
                new ColorCellEditor());
    }

    private class ColorCellEditor 
            extends AbstractCellEditor implements TableCellEditor
    {
        private JComponent editorComponent;
        private Color currentValue;
        
        ColorCellEditor() {
            JButton b = new JButton();
            editorComponent = b;
            b.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int selection = session.getPalette().getSelection();
                    if (selection != -1) {
                        currentValue = session.getPalette().getColor(selection);
                        editorComponent.setBackground(currentValue);
                    }
                    fireEditingStopped();
                }
            });
        }

        public java.awt.Component getTableCellEditorComponent(JTable table, 
                Object value, boolean isSelected, int row, int column) 
        {
            editorComponent.setBackground((Color)value);
            return editorComponent;
        }

        public Object getCellEditorValue() {
            return currentValue;
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        warpEndColorGrid = new com.jenkins.weavingsimulator.GridControl();
        threadingDraftGrid = new com.jenkins.weavingsimulator.GridControl();
        tieUpGrid = new com.jenkins.weavingsimulator.GridControl();
        weavingPatternGrid = new com.jenkins.weavingsimulator.GridControl();
        treadlingDraftGrid = new com.jenkins.weavingsimulator.GridControl();
        pickColorGrid = new com.jenkins.weavingsimulator.GridControl();
        palettePanel = new com.jenkins.weavingsimulator.PalettePanel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        warpEndColorGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        warpEndColorGrid.setCellSelectionEnabled(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(warpEndColorGrid, gridBagConstraints);

        threadingDraftGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(threadingDraftGrid, gridBagConstraints);

        tieUpGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(tieUpGrid, gridBagConstraints);

        weavingPatternGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        weavingPatternGrid.setRowSelectionAllowed(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(weavingPatternGrid, gridBagConstraints);

        treadlingDraftGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(treadlingDraftGrid, gridBagConstraints);

        pickColorGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ));
        pickColorGrid.setCellSelectionEnabled(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        jPanel1.add(pickColorGrid, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        jPanel1.add(palettePanel, gridBagConstraints);

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void draftChangedHandler(WeavingDraft draft) {
        ((ThreadingDraftModel)threadingDraftGrid.getModel()).setDraft(draft);
        ((WarpEndColorModel)warpEndColorGrid.getModel()).setDraft(draft);
        ((WeavingPatternModel)weavingPatternGrid.getModel()).setDraft(draft);
        ((TieUpModel)tieUpGrid.getModel()).setDraft(draft);
        ((TreadlingDraftModel)treadlingDraftGrid.getModel()).setDraft(draft);
        ((StepColorModel)pickColorGrid.getModel()).setDraft(draft);
        
        draft.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent ev) {
                if (!session.isDraftModified())
                    session.setDraftModified(true);
            }
        });
    }
        
    private void fileChangedHandler(File file) {
        if (file != null)
            setTitle(file.getName());
    }
    
    public void displayTiledView() {
        if (tiledViewFrame == null) {
            wpanel = new WeavingPatternPanel();
            wpanel.setDraft(session.getDraft());
            tiledViewFrame = new javax.swing.JFrame(getTitle());
            tiledViewFrame.getContentPane().add(wpanel);
            tiledViewFrame.pack();
            tiledViewFrame.setSize(400, 400);
            addPropertyChangeListener(javax.swing.JInternalFrame.TITLE_PROPERTY, 
                new java.beans.PropertyChangeListener() {
                    public void propertyChange(java.beans.PropertyChangeEvent e) {
                        tiledViewFrame.setTitle((String)e.getNewValue());
                    }
            });
        }
        tiledViewFrame.setVisible(true);
    }
    
    public void hideTiledView() {
        if (tiledViewFrame != null)
            tiledViewFrame.setVisible(false);
    }
    
    private void draftModifiedChangedHandler(boolean draftModified) {
        if (draftModified) {
            setTitle(getTitle() + " *");
        } else {
            String oldTitle = getTitle();
            if (oldTitle.endsWith(" *"))
                setTitle(oldTitle.substring(0, oldTitle.length() - 2));
        }
    }

    /**
     * Getter for property session.
     * @return Value of property session.
     */
    public EditingSession getSession() {

        return this.session;
    }

    /**
     * Setter for property session.
     * @param session New value of property session.
     */
    public void setSession(EditingSession session) {
        if (this.session != null)
            throw new IllegalStateException("Can't reset editing session");
        
        this.session = session;
        draftChangedHandler(session.getDraft());
        fileChangedHandler(session.getFile());
        draftModifiedChangedHandler(session.isDraftModified());
        palettePanel.setSession(session);
        
        session.addPropertyChangeListener(new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                if (evt.getPropertyName().equals(EditingSession.DRAFT_PROPERTY))
                    draftChangedHandler((WeavingDraft)evt.getNewValue());
                else if (evt.getPropertyName().equals(EditingSession.FILE_PROPERTY))
                    fileChangedHandler((File)evt.getNewValue());
                else if (evt.getPropertyName().equals(EditingSession.DRAFT_MODIFIED_PROPERTY))
                    draftModifiedChangedHandler((Boolean)evt.getNewValue());
            }
        });
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private com.jenkins.weavingsimulator.PalettePanel palettePanel;
    private com.jenkins.weavingsimulator.GridControl pickColorGrid;
    private com.jenkins.weavingsimulator.GridControl threadingDraftGrid;
    private com.jenkins.weavingsimulator.GridControl tieUpGrid;
    private com.jenkins.weavingsimulator.GridControl treadlingDraftGrid;
    private com.jenkins.weavingsimulator.GridControl warpEndColorGrid;
    private com.jenkins.weavingsimulator.GridControl weavingPatternGrid;
    // End of variables declaration//GEN-END:variables
    
    private javax.swing.JFrame tiledViewFrame = null;
    private WeavingPatternPanel wpanel = null;
    private EditingSession session;
}
